//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Roles = newRolesTable("identity", "roles", "")

type rolesTable struct {
	postgres.Table

	//Columns
	RoleID        postgres.ColumnInteger
	RoleUUID      postgres.ColumnString
	Name          postgres.ColumnString
	Description   postgres.ColumnString
	CreatedAt     postgres.ColumnTimestamp
	LastUpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RolesTable struct {
	rolesTable

	EXCLUDED rolesTable
}

// AS creates new RolesTable with assigned alias
func (a RolesTable) AS(alias string) *RolesTable {
	return newRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RolesTable with assigned schema name
func (a RolesTable) FromSchema(schemaName string) *RolesTable {
	return newRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RolesTable with assigned table prefix
func (a RolesTable) WithPrefix(prefix string) *RolesTable {
	return newRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RolesTable with assigned table suffix
func (a RolesTable) WithSuffix(suffix string) *RolesTable {
	return newRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRolesTable(schemaName, tableName, alias string) *RolesTable {
	return &RolesTable{
		rolesTable: newRolesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newRolesTableImpl("", "excluded", ""),
	}
}

func newRolesTableImpl(schemaName, tableName, alias string) rolesTable {
	var (
		RoleIDColumn        = postgres.IntegerColumn("role_id")
		RoleUUIDColumn      = postgres.StringColumn("role_uuid")
		NameColumn          = postgres.StringColumn("name")
		DescriptionColumn   = postgres.StringColumn("description")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		LastUpdatedAtColumn = postgres.TimestampColumn("last_updated_at")
		allColumns          = postgres.ColumnList{RoleIDColumn, RoleUUIDColumn, NameColumn, DescriptionColumn, CreatedAtColumn, LastUpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{RoleUUIDColumn, NameColumn, DescriptionColumn, CreatedAtColumn, LastUpdatedAtColumn}
	)

	return rolesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RoleID:        RoleIDColumn,
		RoleUUID:      RoleUUIDColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		CreatedAt:     CreatedAtColumn,
		LastUpdatedAt: LastUpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
